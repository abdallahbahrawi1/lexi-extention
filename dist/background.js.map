{"version":3,"file":"background.js","mappingstGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AEhDA;AACA;AACA;AACA;AACA","sources":["webpack://lexilearn/./src/background/background.ts","webpack://lexilearn/webpack/bootstrap","webpack://lexilearn/webpack/runtime/chunk loaded","webpack://lexilearn/webpack/runtime/define property getters","webpack://lexilearn/webpack/runtime/hasOwnProperty shorthand","webpack://lexilearn/webpack/runtime/make namespace object","webpack://lexilearn/webpack/runtime/jsonp chunk loading","webpack://lexilearn/webpack/before-startup","webpack://lexilearn/webpack/startup","webpack://lexilearn/webpack/after-startup"],"sourcesContent":["const saveWord = (wordObj) => {\n    return new Promise((resolve) => {\n        chrome.storage.local.get(['savedWords'], (result) => {\n            let savedWords = result.savedWords || [];\n            // Check if the word already exists\n            if (!savedWords.some((w) => w.word === wordObj.word)) {\n                // Add the new word if it doesn't exist\n                savedWords.push(wordObj);\n                chrome.storage.local.set({ savedWords }, () => {\n                    resolve();\n                });\n            }\n            else {\n                resolve(); // Word already exists, resolve immediately\n            }\n        });\n    });\n};\nconst saveSentence = (sentence) => {\n    const wordsArray = sentence.split(/\\s+/).map((word) => ({\n        word,\n        memorized: false\n    }));\n    return Promise.all(wordsArray.map(saveWord));\n};\n// Listen for messages from the content script\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n    if (request.words) {\n        // Get words from local storage (if they exist) and merge them with the new ones\n        const storedWords = request.words || [];\n        chrome.storage.local.set({ words: storedWords }, () => {\n            console.log('Words saved:', storedWords);\n        });\n        sendResponse({ status: \"Words received\" });\n    }\n});\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    const { action, text } = message;\n    if (!action) {\n        sendResponse({ error: 'Action is missing' });\n        return true; // Indicate that the response will be sent asynchronously\n    }\n    let lowerCaseAction = action.toLowerCase();\n    switch (lowerCaseAction) {\n        case 'define':\n            console.log('Define action');\n            // Handle the define action\n            // main(text)\n            // .then(definition => {\n            //   sendResponse({ result: definition });\n            // })\n            // .catch(error => {\n            //   sendResponse({ error: `Failed to get definition: ${error.message}` });\n            // });\n            break;\n        case 'translate':\n            // Handle the translate action\n            sendResponse({ result: `Translation for ${text}` });\n            break;\n        case 'pronounce':\n            // Handle the pronounce action\n            sendResponse({ result: `Pronouncing ${text}` });\n            break;\n        case 'save':\n            saveSentence(text)\n                .then(() => {\n                sendResponse({ result: `Text \"${text}\" saved successfully.` });\n            })\n                .catch((error) => {\n                sendResponse({ error: `Failed to save text: ${error.message}` });\n            });\n            break;\n        default:\n            sendResponse({ error: `Unknown action: ${action}` });\n            break;\n    }\n    return true;\n});\nimport Groq from 'groq-sdk';\nconst GROQ_API_KEY = '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';\nconst groq = new Groq({ apiKey: GROQ_API_KEY });\n// async function main(text) {\n//   const chatCompletion = await groq.chat.completions.create({\n//     \"messages\": [\n//       {\n//         \"role\": \"user\",\n//         \"content\": `Define the word ${text}. Only provide the definition, nothing else.`\n//       }\n//     ],\n//     \"model\": \"llama3-groq-70b-8192-tool-use-preview\",\n//     \"temperature\": 0.5,\n//     \"max_tokens\": 1024,\n//     \"top_p\": 0.65,\n//     \"stream\": true,\n//     \"stop\": null\n//   });\n//   let result = '';\n//   for await (const chunk of chatCompletion) {\n//     result += chunk.choices[0]?.delta?.content || '';\n//   }\n//   return result.trim(); // Return the processed output\n// }\n// main('apple').then((text)=>console.log(text)).catch(console.error);\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t\"background\": 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunklexilearn\"] = self[\"webpackChunklexilearn\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [\"vendors-node_modules_groq-sdk_index_mjs\"], () => (__webpack_require__(\"./src/background/background.ts\")))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n",""],"names":[],"sourceRoot":""}